{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vyach\\\\dev\\\\Torgi\\\\src\\\\utils\\\\DateAndTime\\\\DateAndTime.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Time() {\n  _s();\n  //дата и время\n  const [isDate, setIsDate] = useState(new Date());\n  setInterval(() => {\n    setIsDate(new Date());\n  }, 1000); // обновить дату раз в секунду\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 1000);\n    return () => clearInterval(timerID);\n  }, [over, seconds]); // ставлю зависимость, чтобы обновлялся при изменении секунд и при изменении вкл выкл таймер. - ускоряется \n\n  //дата\n  let date = () => {\n    if (isDate.getDate() < 10) {\n      return '0' + isDate.getDate();\n    } else {\n      return isDate.getDate();\n    }\n  }; // число\n  let month = () => {\n    if (isDate.getMonth() < 10) {\n      return '0' + isDate.getMonth();\n    } else {\n      return isDate.getMonth();\n    }\n  }; // месяц\n  let dateNow = date() + '.' + month() + '.' + isDate.getFullYear(); // получить дату;\n\n  // время\n  let hours = () => {\n    if (isDate.getHours() < 10) {\n      return '0' + isDate.getHours();\n    } else {\n      return isDate.getHours();\n    }\n  }; // часы\n  let minutes = () => {\n    if (isDate.getMinutes() < 10) {\n      return '0' + isDate.getMinutes();\n    } else {\n      return isDate.getMinutes();\n    }\n  }; // минуты\n  let seconds = () => {\n    if (isDate.getSeconds() < 10) {\n      return '0' + isDate.getSeconds();\n    } else {\n      return isDate.getSeconds();\n    }\n  }; // секунды\n  let timeNow = hours() + ':' + minutes() + ':' + seconds(); // получить время\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"header_text\",\n    children: [\"(\", dateNow, \" \", timeNow, \");\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 13\n  }, this);\n}\n_s(Time, \"MuS7PGqWdZuC+Sl2cGn3gD7ydNk=\");\n_c = Time;\n;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","isDate","setIsDate","Date","setInterval","timerID","tick","clearInterval","over","seconds","date","getDate","month","getMonth","dateNow","getFullYear","hours","getHours","minutes","getMinutes","getSeconds","timeNow"],"sources":["C:/Users/vyach/dev/Torgi/src/utils/DateAndTime/DateAndTime.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction Time() {\r\n    //дата и время\r\n    const [isDate, setIsDate] = useState(new Date());\r\n    setInterval(() => { setIsDate(new Date()); }, 1000); // обновить дату раз в секунду\r\n\r\n    useEffect(() => {\r\n        const timerID = setInterval(() => tick(), 1000);\r\n        return () => clearInterval(timerID);\r\n    }, [over, seconds]); // ставлю зависимость, чтобы обновлялся при изменении секунд и при изменении вкл выкл таймер. - ускоряется \r\n\r\n    //дата\r\n    let date = () => { if (isDate.getDate() < 10) { return '0' + isDate.getDate() } else { return isDate.getDate() } }; // число\r\n    let month = () => { if (isDate.getMonth() < 10) { return '0' + isDate.getMonth() } else { return isDate.getMonth() } }; // месяц\r\n    let dateNow = date() + '.' + month() + '.' + isDate.getFullYear(); // получить дату;\r\n\r\n    // время\r\n    let hours = () => { if (isDate.getHours() < 10) { return '0' + isDate.getHours() } else { return isDate.getHours() } }; // часы\r\n    let minutes = () => { if (isDate.getMinutes() < 10) { return '0' + isDate.getMinutes() } else { return isDate.getMinutes() } }; // минуты\r\n    let seconds = () => { if (isDate.getSeconds() < 10) { return '0' + isDate.getSeconds() } else { return isDate.getSeconds() } }; // секунды\r\n    let timeNow = hours() + ':' + minutes() + ':' + seconds(); // получить время\r\n\r\n    return (<p className='header_text'>({dateNow} {timeNow});</p>)\r\n\r\n\r\n};\r\n\r\nexport default Time;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAE5C,SAASC,IAAI,GAAG;EAAA;EACZ;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,IAAIK,IAAI,EAAE,CAAC;EAChDC,WAAW,CAAC,MAAM;IAAEF,SAAS,CAAC,IAAIC,IAAI,EAAE,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;EAErDJ,SAAS,CAAC,MAAM;IACZ,MAAMM,OAAO,GAAGD,WAAW,CAAC,MAAME,IAAI,EAAE,EAAE,IAAI,CAAC;IAC/C,OAAO,MAAMC,aAAa,CAACF,OAAO,CAAC;EACvC,CAAC,EAAE,CAACG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAErB;EACA,IAAIC,IAAI,GAAG,MAAM;IAAE,IAAIT,MAAM,CAACU,OAAO,EAAE,GAAG,EAAE,EAAE;MAAE,OAAO,GAAG,GAAGV,MAAM,CAACU,OAAO,EAAE;IAAC,CAAC,MAAM;MAAE,OAAOV,MAAM,CAACU,OAAO,EAAE;IAAC;EAAE,CAAC,CAAC,CAAC;EACpH,IAAIC,KAAK,GAAG,MAAM;IAAE,IAAIX,MAAM,CAACY,QAAQ,EAAE,GAAG,EAAE,EAAE;MAAE,OAAO,GAAG,GAAGZ,MAAM,CAACY,QAAQ,EAAE;IAAC,CAAC,MAAM;MAAE,OAAOZ,MAAM,CAACY,QAAQ,EAAE;IAAC;EAAE,CAAC,CAAC,CAAC;EACxH,IAAIC,OAAO,GAAGJ,IAAI,EAAE,GAAG,GAAG,GAAGE,KAAK,EAAE,GAAG,GAAG,GAAGX,MAAM,CAACc,WAAW,EAAE,CAAC,CAAC;;EAEnE;EACA,IAAIC,KAAK,GAAG,MAAM;IAAE,IAAIf,MAAM,CAACgB,QAAQ,EAAE,GAAG,EAAE,EAAE;MAAE,OAAO,GAAG,GAAGhB,MAAM,CAACgB,QAAQ,EAAE;IAAC,CAAC,MAAM;MAAE,OAAOhB,MAAM,CAACgB,QAAQ,EAAE;IAAC;EAAE,CAAC,CAAC,CAAC;EACxH,IAAIC,OAAO,GAAG,MAAM;IAAE,IAAIjB,MAAM,CAACkB,UAAU,EAAE,GAAG,EAAE,EAAE;MAAE,OAAO,GAAG,GAAGlB,MAAM,CAACkB,UAAU,EAAE;IAAC,CAAC,MAAM;MAAE,OAAOlB,MAAM,CAACkB,UAAU,EAAE;IAAC;EAAE,CAAC,CAAC,CAAC;EAChI,IAAIV,OAAO,GAAG,MAAM;IAAE,IAAIR,MAAM,CAACmB,UAAU,EAAE,GAAG,EAAE,EAAE;MAAE,OAAO,GAAG,GAAGnB,MAAM,CAACmB,UAAU,EAAE;IAAC,CAAC,MAAM;MAAE,OAAOnB,MAAM,CAACmB,UAAU,EAAE;IAAC;EAAE,CAAC,CAAC,CAAC;EAChI,IAAIC,OAAO,GAAGL,KAAK,EAAE,GAAG,GAAG,GAAGE,OAAO,EAAE,GAAG,GAAG,GAAGT,OAAO,EAAE,CAAC,CAAC;;EAE3D,oBAAQ;IAAG,SAAS,EAAC,aAAa;IAAA,WAAC,GAAC,EAACK,OAAO,EAAC,GAAC,EAACO,OAAO,EAAC,IAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAI;AAGjE;AAAC,GAxBQrB,IAAI;AAAA,KAAJA,IAAI;AAwBZ;AAED,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}