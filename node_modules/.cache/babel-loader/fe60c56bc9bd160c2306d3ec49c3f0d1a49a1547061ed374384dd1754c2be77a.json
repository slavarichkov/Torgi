{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vyach\\\\dev\\\\Torgi\\\\src\\\\utils\\\\Timer\\\\Timer.js\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer() {\n  var target_date = new Date().getTime() + 1000 * 3600 * 48; // установить дату обратного отсчета\n  var days, hours, minutes, seconds; // переменные для единиц времени\n\n  function getCountdown() {\n    var current_date = new Date().getTime();\n    var seconds_left = (target_date - current_date) / 1000;\n    days = pad(parseInt(seconds_left / 86400));\n    seconds_left = seconds_left % 86400;\n    hours = pad(parseInt(seconds_left / 3600));\n    seconds_left = seconds_left % 3600;\n    minutes = pad(parseInt(seconds_left / 60));\n    seconds = pad(parseInt(seconds_left % 60));\n  }\n  getCountdown();\n  setInterval(function () {\n    getCountdown();\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"info_timer\",\n    children: seconds\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useEffect","useState","Timer","target_date","Date","getTime","days","hours","minutes","seconds","getCountdown","current_date","seconds_left","pad","parseInt","setInterval"],"sources":["C:/Users/vyach/dev/Torgi/src/utils/Timer/Timer.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n\r\nfunction Timer() {\r\n    var target_date = new Date().getTime() + (1000 * 3600 * 48); // установить дату обратного отсчета\r\n    var days, hours, minutes, seconds; // переменные для единиц времени\r\n\r\n\r\n    function getCountdown() {\r\n\r\n        var current_date = new Date().getTime();\r\n        var seconds_left = (target_date - current_date) / 1000;\r\n\r\n        days = pad(parseInt(seconds_left / 86400));\r\n        seconds_left = seconds_left % 86400;\r\n\r\n        hours = pad(parseInt(seconds_left / 3600));\r\n        seconds_left = seconds_left % 3600;\r\n\r\n        minutes = pad(parseInt(seconds_left / 60));\r\n        seconds = pad(parseInt(seconds_left % 60));\r\n\r\n    }\r\n\r\n    getCountdown();\r\n\r\n    setInterval(function () { getCountdown(); }, 1000);\r\n\r\n    return (\r\n        <div className='info_timer'>{seconds}</div>)\r\n}\r\n\r\nexport default Timer;"],"mappings":";AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAGnD,SAASC,KAAK,GAAG;EACb,IAAIC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAI,IAAI,GAAG,IAAI,GAAG,EAAG,CAAC,CAAC;EAC7D,IAAIC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;;EAGnC,SAASC,YAAY,GAAG;IAEpB,IAAIC,YAAY,GAAG,IAAIP,IAAI,EAAE,CAACC,OAAO,EAAE;IACvC,IAAIO,YAAY,GAAG,CAACT,WAAW,GAAGQ,YAAY,IAAI,IAAI;IAEtDL,IAAI,GAAGO,GAAG,CAACC,QAAQ,CAACF,YAAY,GAAG,KAAK,CAAC,CAAC;IAC1CA,YAAY,GAAGA,YAAY,GAAG,KAAK;IAEnCL,KAAK,GAAGM,GAAG,CAACC,QAAQ,CAACF,YAAY,GAAG,IAAI,CAAC,CAAC;IAC1CA,YAAY,GAAGA,YAAY,GAAG,IAAI;IAElCJ,OAAO,GAAGK,GAAG,CAACC,QAAQ,CAACF,YAAY,GAAG,EAAE,CAAC,CAAC;IAC1CH,OAAO,GAAGI,GAAG,CAACC,QAAQ,CAACF,YAAY,GAAG,EAAE,CAAC,CAAC;EAE9C;EAEAF,YAAY,EAAE;EAEdK,WAAW,CAAC,YAAY;IAAEL,YAAY,EAAE;EAAE,CAAC,EAAE,IAAI,CAAC;EAElD,oBACI;IAAK,SAAS,EAAC,YAAY;IAAA,UAAED;EAAO;IAAA;IAAA;IAAA;EAAA,QAAO;AACnD;AAAC,KA3BQP,KAAK;AA6Bd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}